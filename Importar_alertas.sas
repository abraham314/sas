
/* -------------------------------------------------------------------
   Code generated by SAS Task

   Generated on: Tuesday, December 28, 2010 at 3:49:02 PM
   By task: Import Data

   Input Data: #LN00050
   Server:  SASMain Plataforma Analitica
   ------------------------------------------------------------------- */

%_eg_conditional_dropds(WORK.ALERTAS);
%MACRO _EG_ImportData;

%LET IsMVS=FALSE;
DATA _NULL_;
	IF TRIM(SYMGET("SYSSCP")) = "OS" THEN
		IF GETOPTION("FILESYSTEM") = "MVS" THEN
			CALL SYMPUT("IsMVS", "TRUE");
  STOP;
RUN;

OPTIONS DATESTYLE=DMY;
DATA WORK.ALERTAS;
/* Enterprise Guide creates this temporary asterisk delimited text file from the original data source */
	INFILE #LN00050
		DELIMITER='|'
		MISSOVER
		DSD
	%IF &IsMVS=FALSE %THEN %DO;
		LRECL=32767
	%END;
	;
	LENGTH
		ID_CAJERO $ 12
		FH_TRANSACCION 8
		NU_HORA_TRANSACCION 8
		_T_NU_HORA_TRANSACCION $ 12
		ID_PERIODO 8
		_T_ID_PERIODO $ 12
		ID_DIA 8
		_T_ID_DIA $ 12
		TX_DIA_SEMANA $ 12
		CV_TIPO_DIA $ 2
		IM_MIXTO 8
		_T_IM_MIXTO $ 12
		CT_MIXTA 8
		_T_CT_MIXTA $ 12
		IM_AVG_MIXTO 8
		_T_IM_AVG_MIXTO $ 12
		IM_AVG_AVG_LEGITIMA 8
		_T_IM_AVG_AVG_LEGITIMA $ 12
		IM_AVG_LEGITIMA 8
		_T_IM_AVG_LEGITIMA $ 12
		Tavg 8
		_T_Tavg $ 12
		Tsum 8
		_T_Tsum $ 12
		IN_ATAQUE_PREVIO 8
		_T_IN_ATAQUE_PREVIO $ 12
		CT_X2Y2 8
		_T_CT_X2Y2 $ 12
		IN_ALERTA 8
		_T_IN_ALERTA $ 12

		_W_StringValue $ 22
;
	INFORMAT
		FH_TRANSACCION DDMMYY10.0
;
	FORMAT
		FH_TRANSACCION DATE9.0
;
	INPUT
		ID_CAJERO $
		FH_TRANSACCION : ANYDTDTM22.
		_T_NU_HORA_TRANSACCION $
		_T_ID_PERIODO $
		_T_ID_DIA $
		TX_DIA_SEMANA $
		CV_TIPO_DIA $
		_T_IM_MIXTO $
		_T_CT_MIXTA $
		_T_IM_AVG_MIXTO $
		_T_IM_AVG_AVG_LEGITIMA $
		_T_IM_AVG_LEGITIMA $
		_T_Tavg $
		_T_Tsum $
		_T_IN_ATAQUE_PREVIO $
		_T_CT_X2Y2 $
		_T_IN_ALERTA $
;
	DROP
		_T_NU_HORA_TRANSACCION
		_T_ID_PERIODO
		_T_ID_DIA
		_T_IM_MIXTO
		_T_CT_MIXTA
		_T_IM_AVG_MIXTO
		_T_IM_AVG_AVG_LEGITIMA
		_T_IM_AVG_LEGITIMA
		_T_Tavg
		_T_Tsum
		_T_IN_ATAQUE_PREVIO
		_T_CT_X2Y2
		_T_IN_ALERTA

		_W_StringValue
		_W_NumericValue
;
	LABEL
		ID_CAJERO = "ID_CAJERO"
		FH_TRANSACCION = "FH_TRANSACCION"
		NU_HORA_TRANSACCION = "NU_HORA_TRANSACCION"
		ID_PERIODO = "ID_PERIODO"
		ID_DIA = "ID_DIA"
		TX_DIA_SEMANA = "TX_DIA_SEMANA"
		CV_TIPO_DIA = "CV_TIPO_DIA"
		IM_MIXTO = "IM_MIXTO"
		CT_MIXTA = "CT_MIXTA"
		IM_AVG_MIXTO = "IM_AVG_MIXTO"
		IM_AVG_AVG_LEGITIMA = "IM_AVG_AVG_LEGITIMA"
		IM_AVG_LEGITIMA = "IM_AVG_LEGITIMA"
		Tavg = "Tavg"
		Tsum = "Tsum"
		IN_ATAQUE_PREVIO = "IN_ATAQUE_PREVIO"
		CT_X2Y2 = "Score2"
		IN_ALERTA = "Alerta"
;

	FH_TRANSACCION = DATEPART(FH_TRANSACCION);

	_W_StringValue = _T_NU_HORA_TRANSACCION;
	LINK CheckForLogicValue;
	NU_HORA_TRANSACCION = _W_NumericValue;

	_W_StringValue = _T_ID_PERIODO;
	LINK CheckForLogicValue;
	ID_PERIODO = _W_NumericValue;

	_W_StringValue = _T_ID_DIA;
	LINK CheckForLogicValue;
	ID_DIA = _W_NumericValue;

	_W_StringValue = _T_IM_MIXTO;
	LINK CheckForLogicValue;
	IM_MIXTO = _W_NumericValue;

	_W_StringValue = _T_CT_MIXTA;
	LINK CheckForLogicValue;
	CT_MIXTA = _W_NumericValue;

	_W_StringValue = _T_IM_AVG_MIXTO;
	LINK CheckForLogicValue;
	IM_AVG_MIXTO = _W_NumericValue;

	_W_StringValue = _T_IM_AVG_AVG_LEGITIMA;
	LINK CheckForLogicValue;
	IM_AVG_AVG_LEGITIMA = _W_NumericValue;

	_W_StringValue = _T_IM_AVG_LEGITIMA;
	LINK CheckForLogicValue;
	IM_AVG_LEGITIMA = _W_NumericValue;

	_W_StringValue = _T_Tavg;
	LINK CheckForLogicValue;
	Tavg = _W_NumericValue;

	_W_StringValue = _T_Tsum;
	LINK CheckForLogicValue;
	Tsum = _W_NumericValue;

	_W_StringValue = _T_IN_ATAQUE_PREVIO;
	LINK CheckForLogicValue;
	IN_ATAQUE_PREVIO = _W_NumericValue;

	_W_StringValue = _T_CT_X2Y2;
	LINK CheckForLogicValue;
	CT_X2Y2 = _W_NumericValue;

	_W_StringValue = _T_IN_ALERTA;
	LINK CheckForLogicValue;
	IN_ALERTA = _W_NumericValue;

RETURN;

/* Requires _W_StringValue to be set with the value to be checked */
/* for a value of 'True' or 'False'. If neither is found, an      */
/* attempt is made to extract a numeric value from the string.    */
/* The extracted value is returned in _W_NumericValue.            */
CheckForLogicValue:
	IF UPCASE(TRIM(_W_StringValue)) = "TRUE" THEN
		_W_NumericValue = 1;
	ELSE
		IF UPCASE(TRIM(_W_StringValue)) = "FALSE" THEN
			_W_NumericValue = 0;
		ELSE
			_W_NumericValue = INPUT(_W_StringValue, COMMA32.);
RETURN;

RUN;
%MEND;
%_EG_ImportData
/* -------------------------------------------------------------------
   End of task code.
   ------------------------------------------------------------------- */
RUN; QUIT;
TITLE; FOOTNOTE;
RUN;

data alertas;
set alertas;
if _n_ < 68887;
run;

